import tensorflow as tf
import numpy as np
import os
import glob
import cv2
from keras.models import Sequential
from keras.layers.core import Dense, Flatten, Dropout, Lambda
from keras.layers.convolutional import Conv2D
from keras.layers.normalization import BatchNormalization
from keras.layers import MaxPooling2D
from keras.optimizers import Adam
from keras.utils import to_categorical
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split

"""
Training a small convolutional model on classifing the state of traffic lights.
The model is saved for later use in tl_classifier.py.
Images for training were generated by running TrafficLight_detector.ipynb and are based on
the dataset provided by Anthony Sarkis and Vatsal Srivastava (Thanks a lot!).
https://drive.google.com/file/d/0B-Eiyn-CUQtxdUZWMkFfQzdObUE/view
"""

print "Fetching data for training from 'cropped_sorted_training/red + /yellow + /green + /false'"
cropped_images_red = glob.glob('cropped_sorted_training/red/*.jpg')
cropped_images_yellow = glob.glob('cropped_sorted_training/yellow/*.jpg')
cropped_images_green = glob.glob('cropped_sorted_training/green/*.jpg')
cropped_images_false = glob.glob('cropped_sorted_training/false/*.jpg')

labels = []
x_data = []
#fetching images from all 4 subfolders 
#depending on the path, the label of the image is generated
# red = 0
# yellow = 1
# green = 2
# false detection = 4
for img in cropped_images_red:
    image = cv2.imread(img)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image = cv2.resize(image,(32,32))
    x_data.append(image)
    labels.append(0)

for img in cropped_images_green:
    image = cv2.imread(img)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image = cv2.resize(image,(32,32))
    x_data.append(image)
    labels.append(2)

for img in cropped_images_yellow:
    image = cv2.imread(img)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image = cv2.resize(image,(32,32))
    x_data.append(image)
    labels.append(1)

for img in cropped_images_false:
    image = cv2.imread(img)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image = cv2.resize(image,(32,32))
    x_data.append(image)
    labels.append(4)

x_data = np.asarray(x_data)
one_hot_labels = to_categorical(labels, num_classes=5)

#shuffle and split data into training and test set
x_data, label_data = shuffle(x_data, one_hot_labels)
x_train, x_test, label_train, label_test = train_test_split(x_data, label_data)

#build small convNet, that is loosly based on the MobileNet approach 
model = Sequential()
model.add(Lambda(lambda x: x/255 - 0.5, input_shape=(32,32,3))) #Norm-layer
#first conv-layer 3x3x3@6 stride 2 pad=same
model.add(Conv2D(6,(3,3),strides=(2, 2), padding='same',activation='relu',use_bias=True,kernel_initializer='TruncatedNormal', bias_initializer='zeros'))
model.add(BatchNormalization()) #batch_norm
#depthwise conv-layer 3x3x6@6 stide 1 pad same
model.add(Conv2D(6,(3,3),strides=(1, 1), padding='same',activation='relu',use_bias=True,kernel_initializer='TruncatedNormal', bias_initializer='zeros'))
model.add(BatchNormalization()) #batch_norm
#1x1 conv-layer 1x1x6@18 stride 1 pad same
model.add(Conv2D(18,(1,1),strides=(1, 1), padding='same',activation='relu',use_bias=True,kernel_initializer='TruncatedNormal', bias_initializer='zeros'))
model.add(BatchNormalization()) # batch_norm

model.add(Flatten())
model.add(Dense(100,activation='relu',kernel_initializer='TruncatedNormal',bias_initializer='zeros'))
model.add(Dropout(0.5)) #dropout
model.add(Dense(10,activation='relu',kernel_initializer='TruncatedNormal',bias_initializer='zeros'))

model.add(Dense(5,activation='softmax',kernel_initializer='TruncatedNormal',bias_initializer='zeros'))

optimizer = Adam(lr=0.001)
model.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer=optimizer)

model.fit(x=x_train, y=label_train, epochs=2, batch_size=6)
loss=model.evaluate(x=x_test, y=label_test, batch_size=6)
print "acc on test set: ", loss[1]
model.save('model_.h5')

